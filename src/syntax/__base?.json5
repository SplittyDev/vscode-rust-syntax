{
	"patterns": [
		{
			"comment": "Function call with type parameters",
			"begin": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*(::)(?=\\s*<.*>\\s*\\()",
			"end": "\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.rust"
				},
				"2": {
					"name": "keyword.operator.misc.rust"
				}
			},
		},
		{
			"comment": "Type declaration",
			"begin": "\\b(enum|struct|trait|union)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"end": "[\\{\\(;]",
			"beginCaptures": {
				"1": {
					"name": "storage.type.rust"
				},
				"2": {
					"name": "entity.name.type.rust"
				}
			},
		},
		{
			"comment": "Type alias",
			"begin": "\\b(type)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"end": ";",
			"beginCaptures": {
				"1": {
					"name": "storage.type.rust"
				},
				"2": {
					"name": "entity.name.type.rust"
				}
			},
		}
	],
	"repository": {
		"lifetime": {
			"comment": "Named lifetime",
			"name": "storage.modifier.lifetime.rust",
			"match": "'([a-zA-Z_][a-zA-Z0-9_]*)\\b",
			"captures": {
				"1": {
					"name": "entity.name.lifetime.rust"
				}
			}
		},
		"ref_lifetime": {
			"comment": "Reference with named lifetime",
			"match": "&('([a-zA-Z_][a-zA-Z0-9_]*))\\b",
			"captures": {
				"1": {
					"name": "storage.modifier.lifetime.rust"
				},
				"2": {
					"name": "entity.name.lifetime.rust"
				}
			}
		},
		"core_types": {
			"comment": "Built-in/core type",
			"name": "storage.type.core.rust",
			"match": "\\b(bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self|Option|Result)\\b"
		},
		"core_vars": {
			"comment": "Core type variant",
			"name": "support.constant.core.rust",
			"match": "\\b(Some|None|Ok|Err)\\b"
		},
		"core_marker": {
			"comment": "Core trait (marker)",
			"name": "support.type.marker.rust",
			"match": "\\b(Copy|Send|Sized|Sync)\\b"
		},
		"core_traits": {
			"comment": "Core trait",
			"name": "support.type.core.rust",
			"match": "\\b(Drop|Fn|FnMut|FnOnce|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator)\\b"
		},
		"std_types": {
			"comment": "Standard library type",
			"name": "storage.class.std.rust",
			"match": "\\b(Box|String|Vec|Path|PathBuf)\\b"
		},
		"std_traits": {
			"comment": "Standard library trait",
			"name": "support.type.std.rust",
			"match": "\\b(ToOwned|ToString)\\b"
		},
		// "type": {
		// 	"name": "entity.name.type.rust",
		// 	"match": "\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\b"
		// },
		"type_params": {
			"name": "meta.type_params.rust",
			"begin": "<(?![=<])",
			"end": "(?<![-])>",
		}
	}
}
