{
    "repository": {
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.documentation.rust",
                    "begin": "/\\*[\\*!](?![\\*/])",
                    "end": "\\*/"
                },
                {
                    "name": "comment.block.rust",
                    "begin": "/\\*",
                    "end": "\\*/"
                },
                {
                    "name": "comment.line.documentation.rust",
                    "begin": "//[!/](?=[^/])",
                    "end": "$"
                },
                {
                    "name": "comment.line.double-slash.rust",
                    "begin": "//",
                    "end": "$"
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "comment": "Floating point literal (fraction)",
                    "name": "constant.numeric.float.rust",
                    "match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b"
                },
                {
                    "comment": "Floating point literal (exponent)",
                    "name": "constant.numeric.float.rust",
                    "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\b"
                },
                {
                    "comment": "Floating point literal (typed)",
                    "name": "constant.numeric.float.rust",
                    "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\b"
                },
                {
                    "comment": "Integer literal (decimal)",
                    "name": "constant.numeric.integer.decimal.rust",
                    "match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b"
                },
                {
                    "comment": "Integer literal (hexadecimal)",
                    "name": "constant.numeric.integer.hexadecimal.rust",
                    "match": "\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\b"
                },
                {
                    "comment": "Integer literal (octal)",
                    "name": "constant.numeric.integer.octal.rust",
                    "match": "\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\b"
                },
                {
                    "comment": "Integer literal (binary)",
                    "name": "constant.numeric.integer.binary.rust",
                    "match": "\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\b"
                },
                {
                    "name": "constant.language.boolean.rust",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "entity": {
            "patterns": [
                {
                    "match": "([a-zA-Z_]+)(?=[(])",
                    "name": "entity.name.function.rust"
                },
                {
                    "match": "(impl)\\s(\\S+)",
                    "captures": {
                        "1": {
                            "name": "keyword.other.impl.rust"
                        },
                        "2": {
                            "name": "entity.name.type.rust"
                        }
                    }
                },
                {
                    "comment": "Type declaration",
                    "begin": "\\b(enum|struct|trait|union)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "end": "[\\{\\(;]",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.rust"
                        },
                        "2": {
                            "name": "entity.name.type.rust"
                        }
                    }
                },
                {
                    "comment": "Type alias",
                    "begin": "\\b(type)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
                    "end": ";",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.rust"
                        },
                        "2": {
                            "name": "entity.name.type.rust"
                        }
                    }
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "name": "variable.language.self.rust",
                    "match": "\\b(self)\\b"
                },
                {
                    "name": "keyword.other.unsafe.rust",
                    "match": "\\b(unsafe)\\b"
                },
                {
                    "name": "keyword.control.rust",
                    "match": "\\b(break|continue|else|if|in|for|loop|match|return|while)\\b"
                },
                {
                    "name": "keyword.other.rust",
                    "match": "\\b(crate|extern|ref|use|super|move)\\b"
                },
                {
                    "name": "keyword.other.where.rust",
                    "match": "\\b(where)\\b"
                },
                {
                    "name": "keyword.operator.as.rust",
                    "match": "(\\b(as)\\b)"
                },
                {
                    "name": "keyword.operator.comparison.rust",
                    "match": "(&&|\\|\\||==|!=)"
                },
                {
                    "comment": "Comparison operator (second group because of regex precedence)",
                    "name": "keyword.operator.comparison.rust",
                    "match": "(<=|>=|<|>)"
                }
            ]
        },
        "storage": {
            "patterns": [
                {
                    "name": "storage.modifier.mutable.rust",
                    "match": "\\b(mut)\\b"
                },
                {
                    "name": "storage.modifier.box.rust",
                    "match": "\\b(box)\\b"
                },
                {
                    "name": "storage.modifier.const.rust",
                    "match": "\\b(const)\\b"
                },
                {
                    "name": "storage.modifier.visibility.rust",
                    "match": "\\b(pub)\\b"
                },
                {
                    "name": "storage.modifier.static.rust",
                    "match": "\\b(static)\\b"
                },
                {
                    "name": "storage.type.module.rust",
                    "match": "\\b(mod)\\b"
                },
                {
                    "name": "storage.type.function.rust",
                    "match": "\\b(fn)\\b"
                },
                {
                    "name": "storage.type.rust",
                    "match": "\\b(let)\\b"
                },
                {
                    "name": "storage.type.rust",
                    "match": "\\b(enum|impl|struct|trait|union)\\b"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "name": "constant.character.escape.rust",
                    "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
                },
                {
                    "name": "constant.character.rust",
                    "match": "b?'([^'\\\\]|\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
                },
                {
                    "name": "string.quoted.double.rust",
                    "begin": "b?\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.rust",
                            "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
                        },
                        {
                            "name": "constant.other.placeholder.rust",
                            "match": "{}"
                        },
                        {
                            "name": "constant.other.placeholder.rust",
                            "match": "{:\\?}"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.raw.rust",
                    "begin": "b?r(#*)\"",
                    "end": "\"\\1"
                }
            ]
        },
        "support": {
            "patterns": [
                {
                    "comment": "Built-in macro",
                    "name": "support.function.builtin.rust",
                    "match": "\\b(macro_rules|compile_error|format_args|env|option_env|concat_idents|concat|line|column|file|stringify|include|include_str|include_bytes|module_path|cfg)!"
                },
                {
                    "comment": "Core macro",
                    "name": "support.function.core.rust",
                    "match": "\\b(panic|assert|assert_eq|assert_ne|debug_assert|debug_assert_eq|debug_assert_ne|try|write|writeln|unreachable|unimplemented)!"
                },
                {
                    "comment": "Standard library macro",
                    "name": "support.function.std.rust",
                    "match": "\\b(format|print|println|eprint|eprintln|select|vec)!"
                },
                {
                    "comment": "Logging macro",
                    "name": "support.function.log.rust",
                    "match": "\\b(log|error|warn|info|debug|trace|log_enabled)!"
                },
                {
                    "comment": "Core type variant",
                    "name": "support.constant.core.rust",
                    "match": "\\b(Some|None|Ok|Err)\\b"
                }
            ]
        },
        "unsorted": {
            "patterns": [
                {
                    "comment": "Named lifetime",
                    "name": "storage.modifier.lifetime.rust",
                    "match": "'([a-zA-Z_][a-zA-Z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.name.lifetime.rust"
                        }
                    }
                },
                {
                    "comment": "Reference with named lifetime",
                    "match": "&('([a-zA-Z_][a-zA-Z0-9_]*))\\b",
                    "captures": {
                        "1": {
                            "name": "storage.modifier.lifetime.rust"
                        },
                        "2": {
                            "name": "entity.name.lifetime.rust"
                        }
                    }
                },
                {
                    "comment": "Built-in/core type",
                    "name": "storage.type.core.rust",
                    "match": "\\b(bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self|Option|Result)\\b"
                },
                {
                    "comment": "Core trait (marker)",
                    "name": "support.type.marker.rust",
                    "match": "\\b(Copy|Send|Sized|Sync)\\b"
                },
                {
                    "comment": "Core trait",
                    "name": "support.type.core.rust",
                    "match": "\\b(Drop|Fn|FnMut|FnOnce|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator)\\b"
                },
                {
                    "comment": "Standard library type",
                    "name": "storage.class.std.rust",
                    "match": "\\b(Box|String|Vec|Path|PathBuf)\\b"
                },
                {
                    "comment": "Standard library trait",
                    "name": "support.type.std.rust",
                    "match": "\\b(ToOwned|ToString)\\b"
                },
                {
                    "name": "meta.type_params.rust",
                    "begin": "<(?![=<])",
                    "end": "(?<![-])>"
                }
            ]
        },
        "meta": {
            "patterns": [
                {
                    "name": "meta.attribute.rust",
                    "begin": "#\\!?\\[",
                    "end": "\\]"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "name": "keyword.operator.path.rust",
                    "match": "(::)"
                },
                {
                    "name": "keyword.operator.return-type.rust",
                    "match": "(->)"
                },
                {
                    "name": "keyword.operator.match.rust",
                    "match": "(=>)"
                },
                {
                    "name": "keyword.operator.ignored.rust",
                    "match": "\\b(_)\\b"
                },
                {
                    "name": "keyword.operator.member-access.rust",
                    "match": "\\b(\\.)\\b"
                },
                {
                    "name": "keyword.operator.range.rust",
                    "match": "(\\.\\.)"
                },
                {
                    "name": "keyword.operator.sigil.rust",
                    "match": "[&*](?=[a-zA-Z0-9_\\(\\[\\|\\\"]+)"
                },
                {
                    "name": "keyword.operator.assignment.rust",
                    "match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)"
                },
                {
                    "name": "keyword.operator.arithmetic.rust",
                    "match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>)"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.terminator.rust",
                    "match": ";$"
                },
                {
                    "name": "punctuation.other.comma.rust",
                    "match": ","
                }
            ]
        }
    },
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "rust",
    "scopeName": "source.rust",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#entity"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#meta"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#string"
        },
        {
            "include": "#support"
        },
        {
            "include": "#unsorted"
        },
        {
            "include": "#variable"
        }
    ]
}